"""
Main GUI Application
‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PowerQuery Refresh Application
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
from typing import Dict, List, Any, Optional
import os
import sys

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.config_manager import ConfigManager
from core.logger_manager import LoggerManager
from core.file_manager import FileManager
from refreshers.excel_refresher import ExcelRefresher
from gui.settings_window import SettingsWindow


class MainGUI:
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("PowerQuery Refresh Application")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á components ‡∏ï‡∏£‡∏á‡πÜ ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ PowerQueryRefreshApp
        self.config_manager = ConfigManager()
        self.logger_manager = LoggerManager()
        self.file_manager = FileManager()
        self.excel_refresher = ExcelRefresher(self.logger_manager, self.file_manager)
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü‡∏•‡πå
        self.file_vars = []  # ‡πÄ‡∏Å‡πá‡∏ö BooleanVar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
        self.file_info = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
        self.create_widgets()
        self.refresh_file_list()
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ protocol ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def create_widgets(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á widgets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        # Frame ‡∏´‡∏•‡∏±‡∏Å
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î weight ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö responsive
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        title_label = ttk.Label(main_frame, text="PowerQuery Refresh Application", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        settings_button = ttk.Button(main_frame, text="‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", 
                                   command=self.open_settings)
        settings_button.grid(row=1, column=0, sticky=tk.W, pady=(0, 10))
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
        refresh_button = ttk.Button(main_frame, text="üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", 
                                  command=self.refresh_file_list)
        refresh_button.grid(row=1, column=1, pady=(0, 10))
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        self.status_label = ttk.Label(main_frame, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå...", 
                                     foreground="blue")
        self.status_label.grid(row=1, column=2, sticky=tk.E, pady=(0, 10))
        
        # Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
        files_frame = ttk.LabelFrame(main_frame, text="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ", padding="10")
        files_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        files_frame.columnconfigure(0, weight=1)
        files_frame.rowconfigure(0, weight=1)
        
        # Treeview ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
        self.create_file_treeview(files_frame)
        
        # Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        control_frame = ttk.Frame(main_frame)
        control_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
        control_frame.columnconfigure(0, weight=1)
        control_frame.columnconfigure(1, weight=1)
        control_frame.columnconfigure(2, weight=1)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î/‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        select_all_button = ttk.Button(control_frame, text="‚úì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", 
                                     command=self.select_all_files)
        select_all_button.grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        
        deselect_all_button = ttk.Button(control_frame, text="‚úó ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", 
                                       command=self.deselect_all_files)
        deselect_all_button.grid(row=0, column=1, padx=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏ä
        self.refresh_button = ttk.Button(control_frame, text="üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏ä‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", 
                                       command=self.start_refresh, style='Accent.TButton')
        self.refresh_button.grid(row=0, column=2, sticky=tk.E, padx=(5, 0))
        
        # Progress bar
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(main_frame, variable=self.progress_var, 
                                          mode='determinate')
        self.progress_bar.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.progress_label = ttk.Label(main_frame, text="‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
        self.progress_label.grid(row=5, column=0, columnspan=3, pady=(5, 0))
    
    def create_file_treeview(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview
        columns = ("select", "name", "path", "status")
        self.tree = ttk.Treeview(parent, columns=columns, show="headings", height=10)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        self.tree.heading("select", text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        self.tree.heading("name", text="‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå")
        self.tree.heading("path", text="‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
        self.tree.heading("status", text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        self.tree.column("select", width=80, anchor="center")
        self.tree.column("name", width=200)
        self.tree.column("path", width=300)
        self.tree.column("status", width=100, anchor="center")
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(parent, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # ‡∏ß‡∏≤‡∏á‡πÉ‡∏ô grid
        self.tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # Bind double-click event
        self.tree.bind("<Double-1>", self.toggle_file_selection)
    
    def verify_files(self) -> Dict[str, Any]:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
        
        Returns:
            Dict[str, Any]: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
        """
        result = {
            "excel_files": {"valid": [], "invalid": []},
            "total_valid": 0,
            "total_invalid": 0
        }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel
        for file_info in self.config_manager.excel_files:
            if self.file_manager.file_exists(file_info["path"]) and self.file_manager.is_excel_file(file_info["path"]):
                result["excel_files"]["valid"].append(file_info)
            else:
                result["excel_files"]["invalid"].append(file_info)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ
        result["total_valid"] = len(result["excel_files"]["valid"])
        result["total_invalid"] = len(result["excel_files"]["invalid"])
        
        return result
    
    def create_backups(self) -> Dict[str, Any]:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        
        Returns:
            Dict[str, Any]: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
        """
        backup_result = {
            "success": 0,
            "failed": 0,
            "backup_paths": []
        }
        
        # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        selected_files = self.get_selected_files()
        for file_info in selected_files:
            if self.file_manager.file_exists(file_info["path"]):
                backup_path = self.file_manager.backup_file(file_info["path"], True)
                if backup_path:
                    backup_result["success"] += 1
                    backup_result["backup_paths"].append(backup_path)
                else:
                    backup_result["failed"] += 1
        
        return backup_result
    
    def auto_cleanup_backups(self, days_to_keep: int = 30) -> int:
        """
        ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        
        Args:
            days_to_keep (int): ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á
            
        Returns:
            int: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
        """
        return self.file_manager.cleanup_old_backups(days_to_keep)
    
    def refresh_file_list(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        self.status_label.config(text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå...", foreground="blue")
        self.root.update_idletasks()
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
            verification_result = self.verify_files()
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤
            self.tree.delete(*self.tree.get_children())
            self.file_vars.clear()
            self.file_info.clear()
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå valid
            for file_info in verification_result["excel_files"]["valid"]:
                var = tk.BooleanVar(value=True)  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å
                self.file_vars.append(var)
                self.file_info.append(file_info)
                
                name = os.path.basename(file_info["path"])
                self.tree.insert("", "end", values=(
                    "‚úì", name, file_info["path"], "‚úì ‡∏û‡∏£‡πâ‡∏≠‡∏°"
                ))
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå invalid
            for file_info in verification_result["excel_files"]["invalid"]:
                var = tk.BooleanVar(value=False)  # ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                self.file_vars.append(var)
                self.file_info.append(file_info)
                
                name = os.path.basename(file_info["path"])
                self.tree.insert("", "end", values=(
                    "‚úó", name, file_info["path"], "‚úó ‡πÑ‡∏°‡πà‡∏û‡∏ö"
                ))
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            total_files = len(self.file_info)
            valid_files = verification_result["total_valid"]
            invalid_files = verification_result["total_invalid"]
            
            if invalid_files > 0:
                self.status_label.config(
                    text=f"‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {total_files} ‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ {valid_files}, ‡πÑ‡∏°‡πà‡∏û‡∏ö {invalid_files})",
                    foreground="orange"
                )
            else:
                self.status_label.config(
                    text=f"‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {valid_files} ‡πÑ‡∏ü‡∏•‡πå (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)",
                    foreground="green"
                )
                
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
            self.status_label.config(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", foreground="red")
    
    def toggle_file_selection(self, event):
        """‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠ double-click"""
        item = self.tree.selection()[0]
        index = self.tree.index(item)
        
        if index < len(self.file_vars):
            current_value = self.file_vars[index].get()
            new_value = not current_value
            self.file_vars[index].set(new_value)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó display
            values = list(self.tree.item(item, "values"))
            values[0] = "‚úì" if new_value else "‚úó"
            self.tree.item(item, values=values)
    
    def select_all_files(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"""
        for i, var in enumerate(self.file_vars):
            item = self.tree.get_children()[i]
            values = list(self.tree.item(item, "values"))
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‚úì ‡∏û‡∏£‡πâ‡∏≠‡∏°"
            if values[3] == "‚úì ‡∏û‡∏£‡πâ‡∏≠‡∏°":
                var.set(True)
                values[0] = "‚úì"
                self.tree.item(item, values=values)
    
    def deselect_all_files(self):
        """‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        for i, var in enumerate(self.file_vars):
            var.set(False)
            item = self.tree.get_children()[i]
            values = list(self.tree.item(item, "values"))
            values[0] = "‚úó"
            self.tree.item(item, values=values)
    
    def get_selected_files(self):
        """‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        selected_files = []
        for i, var in enumerate(self.file_vars):
            if var.get() and i < len(self.file_info):
                selected_files.append(self.file_info[i])
        return selected_files
    
    def start_refresh(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏ä"""
        selected_files = self.get_selected_files()
        
        if not selected_files:
            messagebox.showwarning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", 
                                 "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏ä")
            return
        
        # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        result = messagebox.askyesno("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏ä", 
                                   f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏ä {len(selected_files)} ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n"
                                   "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏ä")
        
        if result:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏ä‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å
            self.refresh_button.config(state="disabled", text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏ä...")
            self.progress_var.set(0)
            self.progress_label.config(text="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏ä...")
            
            thread = threading.Thread(target=self.refresh_worker, args=(selected_files,))
            thread.daemon = True
            thread.start()
    
    def refresh_worker(self, selected_files):
        """Worker function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏ä‡πÑ‡∏ü‡∏•‡πå (‡∏£‡∏±‡∏ô‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å)"""
        try:
            total_steps = 4  # verify, backup, cleanup, refresh
            current_step = 0
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
            self.update_progress(current_step / total_steps * 100, "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå...")
            verification_result = self.verify_files()
            current_step += 1
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
            self.update_progress(current_step / total_steps * 100, "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á...")
            backup_result = self.create_backups()
            current_step += 1
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤
            self.update_progress(current_step / total_steps * 100, "‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤...")
            deleted_count = self.auto_cleanup_backups(30)
            current_step += 1
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏£‡∏µ‡πÄ‡∏ü‡∏ä‡πÑ‡∏ü‡∏•‡πå
            self.update_progress(current_step / total_steps * 100, "‡∏£‡∏µ‡πÄ‡∏ü‡∏ä‡πÑ‡∏ü‡∏•‡πå Excel...")
            
            # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            refresh_result = self.excel_refresher.refresh_multiple_files(
                selected_files,
                self.config_manager.settings
            )
            
            # ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            self.update_progress(100, "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            self.show_refresh_result(verification_result, backup_result, deleted_count, refresh_result)
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏ä: {e}"))
        finally:
            # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            self.root.after(0, self.reset_refresh_button)
    
    def update_progress(self, value, text):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress bar ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        self.root.after(0, lambda: self.progress_var.set(value))
        self.root.after(0, lambda: self.progress_label.config(text=text))
    
    def show_refresh_result(self, verification_result, backup_result, deleted_count, refresh_result):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏ä"""
        message = "=== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏ä ===\n\n"
        message += f"‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á {verification_result['total_valid']}, ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á {verification_result['total_invalid']}\n"
        message += f"‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {backup_result['success']}, ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß {backup_result['failed']}\n"
        message += f"‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏ö: {deleted_count} ‡πÑ‡∏ü‡∏•‡πå\n"
        message += f"Excel ‡∏£‡∏µ‡πÄ‡∏ü‡∏ä: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {refresh_result['success']}, ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß {refresh_result['failed']}\n"
        message += f"‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {refresh_result['total']} ‡πÑ‡∏ü‡∏•‡πå"
        
        if refresh_result['failed'] > 0:
            self.root.after(0, lambda: messagebox.showwarning("‡∏£‡∏µ‡πÄ‡∏ü‡∏ä‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)", message))
        else:
            self.root.after(0, lambda: messagebox.showinfo("‡∏£‡∏µ‡πÄ‡∏ü‡∏ä‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", message))
        
        # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
        self.root.after(0, self.refresh_file_list)
    
    def reset_refresh_button(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏ä"""
        self.refresh_button.config(state="normal", text="üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏ä‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        self.progress_var.set(0)
        self.progress_label.config(text="‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
    
    def open_settings(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        settings_window = SettingsWindow(self.root, self, self.refresh_file_list)
    
    def on_closing(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á"""
        self.root.quit()
        self.root.destroy()
    
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô GUI"""
        self.root.mainloop()


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô GUI"""
    app = MainGUI()
    app.run()


if __name__ == "__main__":
    main()
